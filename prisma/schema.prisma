// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  address        String?
  email          String
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  cart           Cart[]
  Account        Account[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // this creates a relation. Rewatch antpnio on his part on youtube for more unserstanding  @1:40:00 

  @@unique([provider, providerAccountId])
}

model Cart {
  id         Int        @id @default(autoincrement())
  totalPrice Float
  date       DateTime?
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  products   Products[]
}

model Products {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  cartId          Int?
  productQuantity Int
  priceInCents    Int
  category        ItemCategories[]
  cart            Cart?            @relation(fields: [cartId], references: [id])
}

enum ItemCategories {
  Tech
  Lifestyle
  Healcare
  PersonalCare
  Food
}
